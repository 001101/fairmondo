-#
-#
-# == License:
-# Fairnopoly - Fairnopoly is an open-source online marketplace.
-# Copyright (C) 2013 Fairnopoly eG
-#
-# This file is part of Fairnopoly.
-#
-# Fairnopoly is free software: you can redistribute it and/or modify
-# it under the terms of the GNU Affero General Public License as
-# published by the Free Software Foundation, either version 3 of the
-# License, or (at your option) any later version.
-#
-# Fairnopoly is distributed in the hope that it will be useful,
-# but WITHOUT ANY WARRANTY; without even the implied warranty of
-# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-# GNU Affero General Public License for more details.
-#
-# You should have received a copy of the GNU Affero General Public License
-# along with Fairnopoly.  If not, see <http://www.gnu.org/licenses/>.
-#
- if resource.owned_by? current_user
  .seller-controls
    - if policy(resource).edit?
      = link_to t('article.titles.edit') , edit_article_path , :class => "Button"
    - if resource.locked? && policy(resource).new?
      = link_to t('article.labels.edit_as_new') , new_article_path(:edit_as_new => resource.id), :class => "Button"
    - if policy(resource).deactivate?
      = link_to t('article.labels.edit_or_delete') , article_path(:deactivate => true), :confirm => t('article.deactivate_confirm') , :class => "Button", :method => :put
      = button_to t('article.labels.deactivate') , article_path(:deactivate => true), :class => "Button", :method => :put
      %span.sprite_helper{title: "Wenn Du Deinen Artikel vom Marktplatz nimmst, ist dieser nicht mehr aktiv und kann nicht mehr gefunden und gekauft werden. Du musst den Artikel vom Marktplatz nehmen, wenn Du ihn bearbeiten oder lÃ¶schen willst. Du findest die nicht aktiven Artikel in Deinem Profil unter Nicht eingestellte Artikel." }
    - if policy(resource).destroy?
      = button_to t('common.actions.destroy'),  article_path(resource) , :confirm => t('article.delete_confirm', :name => article.title) ,:method => :delete, :class => "Button"


%figure.image
  - cache [resource, resource.title_image] do
    - if resource.title_image_present?
      / The next line is for providing the proper title image to facebook
      - provide( :title_image, resource.title_image_url(:medium) )
      = link_to image_tag(resource.title_image_url(:medium), :class=> "title_image",:style => "max-width: #{resource.title_image.geometry(:original).width}px"), resource.title_image_url(:original) , {:class => "colorbox", :rel => "gallery"}
    - else
      = link_to image_tag("missing.png", :class=> "title_image") , "#"
.info
  .left
    .thumbnails
      - resource.thumbnails.each do |image|
        - cache [resource,image,"thumbnail"] do
          = link_to image_tag((image ? image.image.url(:thumb) : "missing.png")), image ? image.url_or_original_while_processing(:original) : "/assets/missing.png", :class => "colorbox thumbnail", :rel => "gallery"
    - cache [resource,resource.seller,"donations"] do
      - if resource.seller.ngo
        =t('article.show.donate_ngo_html', ngo: link_to(resource.seller.nickname, resource.seller))
      - else
        - if show_fair_percent_for? resource
          %h4.fair_percent
            = t('article.show.fair_percent')
            %span.sprite_helper{:title => t('article.preview.tooltips.fees_and_donations')}
          =t('article.show.donate_html')
        - if show_friendly_percent_for? resource

          =t('article.show.friendly_percent')
          %span.sprite_helper{:title => t('article.preview.tooltips.friendly_percent', percent: resource.friendly_percent, ngo: resource.friendly_percent_organisation_nickname)}
          = t('article.show.friendly_percent_html', percent: resource.friendly_percent , ngo: link_to(resource.friendly_percent_organisation_nickname, resource.friendly_percent_organisation))
        .tags
          = commendation_labels_for resource
          = condition_label resource
  .right
    %h2.title
      = resource.title

    .details
      - cache [resource,"basic_information"] do
        %h3.price= humanized_money_with_symbol resource.price
        = t('formtastic.labels.article.price')
        .vat
          - unless article.vat == 0
            = t('article.vat_included', :mwst => article.vat)
        .transport
          = t('formtastic.labels.article.transport_method') + " :"
          %ul
            = transport_format_for "pickup"
            = transport_format_for "type1"
            = transport_format_for "type2"
        = render 'articles/show/basic_price', :article => resource
        .transport_time
          - if resource.transport_time && !resource.transport_time.empty?
            = t('formtastic.labels.article.transport_time_with_numbers', time: resource.transport_time)
      .quantity
        - if resource.is_available?
          Dieser Artikel ist bereits ausverkauft
        - elsif resource.quantity > 1
          = t('formtastic.labels.article.quantity_with_numbers', quantities: resource.business_transaction_quantity_available)
    .buyer-controls
      -# Collect button and libraries list
      - if user_signed_in? && resource.active?
        = render "libraries/shared/control_panel", article: resource, libraries: @user_libraries

      -# To cart/buy button
      - if policy(resource.business_transaction).edit?
        = link_to t('common.actions.to_cart'), edit_business_transaction_path(resource.business_transaction), class: "Button"
      - elsif policy(resource.business_transaction).show_vacationing?
        .Button.Button--disabled= t 'common.actions.to_cart'
        %p
          %strong= t 'users.states.vacationing'
      - if resource.active?
        .control-links
          = link_to t('common.actions.borrow'), '/faq#leih', class: 'Qtip', title: t('article.show.borrow'), onclick: 'return false'
          = '/'
          = link_to t('common.actions.swap'), '/faq#tausch', class: 'Qtip', title: t('article.show.swap'), onclick: 'return false'

.socialshareprivacy{data: {uri: article_url(resource), title: resource.title}}

.Accordion.Accordion--activated
  - cache [resource, "contents"] do
    / Artikelbeschreibung
    = accordion_item "content" do
      .Accordion-step
        %p
          = resource.content.html_safe
      - if resource.condition.old?
        %strong
          = "#{t("formtastic.labels.article.condition")}:"
        = resource.condition_extra_text


    = accordion_item "payment" do

      %h4
        = t('formtastic.labels.article.payment_methods')+':'
      %ul
        = payment_format_for "bank_transfer"
        = payment_format_for "cash"
        = payment_format_for "paypal"
        = payment_format_for "cash_on_delivery"
        = payment_format_for "invoice"

      = simple_format(resource.payment_details).html_safe
      %h4
        = t('formtastic.labels.article.transport_method') + ':'
      %ul
        = transport_format_for "pickup"
        = transport_format_for "type1"
        = transport_format_for "type2"

      = simple_format(resource.transport_details).html_safe

    - if resource.has_commendation?
      = accordion_item "commendation" do
        = render 'articles/show/commendation', :article => resource

  - cache [resource.seller,"legal_info"] do
    / Only legal sellers
    - if resource.seller.is_a?(LegalEntity)
      = accordion_item "terms", {content_class: "Accordion-content-maxsize"} do
        = resource.seller_terms.html_safe
      = accordion_item "cancellation", {content_class: "Accordion-content-maxsize"} do
        = resource.seller_cancellation.html_safe
      = accordion_item "about", {content_class: "Accordion-content-maxsize"} do
        = resource.seller_about.html_safe


  - # Feedback Box
  - if policy(resource).report?
    = accordion_item "report" do
      = render 'feedbacks/varieties/report', feedback: Feedback.new

  - # Comment Area
  = render "comments/commentable_comments", commentable: resource
