%h1 Statistiken

%hr
= link_to 'Category Sales', statistics_category_sales_path
%hr


%h2 Anzahl Geschäftskunden
%p
  =LegalEntity.all.count
%h2 Anzahl Artikel von Geschäftskunden
%p
  = LegalEntity.all.collect {|u| u.articles.active }.flatten.count
- result = statistics_articles
%h2 Anzahl Privatkunden
%p
  =PrivateUser.all.count
%h2 Anzahl Artikel von Privatkunden
%p
  = PrivateUser.all.collect {|u| u.articles.active }.flatten.count
- result = statistics_articles
%hr
%h2 Insgesamt eingestellter Warenwert (ohne Artikelstückzahlen)
%p
  = humanized_money_with_symbol result[:sum]
%h2 Insgesamt eingestellter Warenwert (mit Artikelstückzahlen)
%p
  = humanized_money_with_symbol result[:sum_quantity]
%hr
%h2 Gesamtprovision für FN (ohne Artikelstückzahlen)
%p
  = humanized_money_with_symbol result[:provision]
%h2 Gesamtprovision für FN (mit Artikelstückzahlen)
%p
  = humanized_money_with_symbol result[:provision_quantity]

%h2 Provision durch als fair eingestufte Artikel (3% Provision, ohne Artikelstückzahlen)
%p
  = humanized_money_with_symbol result[:provision_by_fair]
%h2 Provision durch als fair eingestufte Artikel (3% Provision, mit Artikelstückzahlen)
%p
  = humanized_money_with_symbol result[:provision_by_fair_quantity]

%h2 Provision durch konventionelle Artikel (6% Provision, ohne Artikelstückzahlen)
%p
  = humanized_money_with_symbol result[:provision_by_conventional]
%h2 Provision durch konventionelle Artikel (6% Provision, mit Artikelstückzahlen)
%p
  = humanized_money_with_symbol result[:provision_by_conventional_quantity]
%hr
%h2 Gesamtspendenaufkommen (ohne Artikelstückzahlen)
%p
  = humanized_money_with_symbol result[:fair]
%h2 Gesamtspendenaufkommen (mit Artikelstückzahlen)
%p
  = humanized_money_with_symbol result[:fair_quantity]
%hr
%h2 Anteil von als fair eingestuften Artikeln in % im Vergleich zu sonstigen Artikeln (Artikelstückzahlen nicht berücksichtigt)
%p
  = result[:fair_part]*100
  = "%"
%h2 Anteil von als öko eingestuften Artikeln in % im Vergleich zu sonstigen Artikeln (Artikelstückzahlen nicht berücksichtigt)
%p
  = result[:eco_part]*100
  = "%"

%h2 Aufteilung nach Kategorien:
%ul
  - Category.sorted_roots.each do |c|
    %li
      = c.name
      = ":"
      = statistics_category_articles (c)

%hr
- result_sold = statistics_sold_articles

%p
  %h2 Verkaufte Artikel (Anzahl ohne Stückzahlen)
  = result_sold[:amount_unique]
%p
  %h2 Verkaufte Artikel (Anzahl mit Stückzahlen)
  = result_sold[:amount_total]
%p
  %h2 Wert der verkauften Artikel
  = humanized_money_with_symbol result_sold[:sold_value]
%p
  %h2 Bisher eingenommene Gebühren
  = humanized_money_with_symbol result_sold[:sold_fee]
%p
  %h2 Bisher eingenommene Spenden (faires Prozent)
  = humanized_money_with_symbol result_sold[:sold_fair]

%hr
%hr
/ TODO Wording, formatting, cleanup

- weekly_result_sold = weekly_statistics_sold_articles
- biweekly_result_sold = biweekly_statistics_sold_articles

%p
  %h2 Letzte Woche verkaufte Artikel (Anzahl ohne Stückzahlen)
  = weekly_result_sold[:amount_unique]
  (wöchentliche Wachstumsrate:
  - if (biweekly_result_sold[:amount_unique] - weekly_result_sold[:amount_unique]) == 0
    0
  - elsif biweekly_result_sold[:amount_unique] > 1
    = ((weekly_result_sold[:amount_unique] / biweekly_result_sold[:amount_unique] - 1) * 100).round(2)
  = "%)"
%p
  %h2 Letzte Woche verkaufteArtikel (Anzahl mit Stückzahlen)
  = weekly_result_sold[:amount_total]
  (wöchentliche Wachstumsrate:
  - if (biweekly_result_sold[:amount_total] - weekly_result_sold[:amount_total]) == 0
    0
  - elsif biweekly_result_sold[:amount_total] > 1
    = ((weekly_result_sold[:amount_total].to_f / biweekly_result_sold[:amount_total] - 1) * 100).round(2)
  = "%)"
%p
  %h2 Wert der letzte Woche verkauften Artikel
  = humanized_money_with_symbol weekly_result_sold[:sold_value]
  (wöchentliche Wachstumsrate:
  - if (biweekly_result_sold[:sold_value] - weekly_result_sold[:sold_value]) == 0
    0
  - elsif biweekly_result_sold[:sold_value] > 1
    = ((weekly_result_sold[:sold_value] / biweekly_result_sold[:sold_value] - 1) * 100).round(2)
  = "%)"
%p
  %h2 Letzte Woche eingenommene Gebühren
  = humanized_money_with_symbol weekly_result_sold[:sold_fee]
  (wöchentliche Wachstumsrate:
  - if (biweekly_result_sold[:sold_fee] - weekly_result_sold[:sold_fee]) == 0
    k.A. - in der Vorwoche wurden keine Gebühren eingenommen).
  - elsif biweekly_result_sold[:sold_fee] > 1
    = ((weekly_result_sold[:sold_fee] / biweekly_result_sold[:sold_fee] - 1) * 100).round(2)
    = "%)"
%p
  %h2 Letzte Woche eingenommene Spenden (faires Prozent)
  = humanized_money_with_symbol weekly_result_sold[:sold_fair]
  (wöchentliche Wachstumsrate:
  - if (biweekly_result_sold[:sold_fair] - weekly_result_sold[:sold_fair]) == 0
    k.A. - in der Vorwoche wurden keine Spenden eingenommen).
  - elsif biweekly_result_sold[:sold_fair] > 1
    = ((weekly_result_sold[:sold_fair] / biweekly_result_sold[:sold_fair] - 1) * 100).round(2)
    = "%)"