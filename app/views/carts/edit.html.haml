
= semantic_form_for @cart_checkout_form, as: :cart_checkout_form,  url: cart_path(@cart), method: :put do |f|
  = semantic_relation_field_for f, :line_item_groups, @cart.line_item_groups do |group, group_fields|
    = line_item_group_frame line_item_group_title(group), frame_class: "js-unified-toggle-group" do
      = group_fields.inputs do
        = group_fields.input :unified_transport, input_html: {class: 'js-unified-transport--trigger'}, label: unified_transport_label_for(group) if group.transport_can_be_unified?
        - if group.payment_can_be_unified?
          .unified_payment
            = group_fields.input :unified_payment, input_html: {class: 'js-unified-payment--trigger'}
            = group_fields.input :unified_payment_method, as: :select, include_blank: false, collection: unified_payment_options_for(group), label: false
      .Listview
        = semantic_relation_field_for f, :line_items, group.line_items do |line_item, line_item_fields|
          - article = line_item.business_transaction.article
          .Listview-item
            .Listview-image
              = link_to image_tag(article.title_image_url(:thumb)), article_path(article)
            = render "shared/listview/listview_detail", article: article
            .Listview-quantity
              -#Anzahl: #{line_item.quantity}

              = line_item_fields.semantic_fields_for :business_transaction, line_item.business_transaction do |t|
                = t.inputs do
                  = t.input :selected_transport, include_blank: false, wrapper_html: {class: 'js-unified-transport--target'}, collection: line_item.business_transaction.article.selectable_transports
                  = t.input :selected_payment, include_blank: false, wrapper_html: {class: 'js-unified-payment--target'}, collection: line_item.business_transaction.article.selectable_payments
      = group_fields.inputs do
        = group_fields.input :message
        = group_fields.input :tos_accepted
  %h3
    Rechnungsadresse
  - unless @cart_checkout_form.needs_new_payment_address?
    .Grid
      = render 'addresses/address', address: @cart_checkout_form.payment_address, controls: true
  - else
    = f.semantic_fields_for @cart_checkout_form.payment_address do |baf|
      = baf.inputs do
        = baf.input :title, as: :select, collection: [t('common.title.woman'),t('common.title.man')]
        = baf.input :first_name, required: true
        = baf.input :last_name, required: true
        = baf.input :company_name
        = baf.input :address_line_1, required: true
        = baf.input :address_line_2
        = baf.input :zip, required: true
        = baf.input :city, required: true
        = baf.input :country, required: true, as: :select, collection: [t('users.countries.germany')]
  %h3
    Lieferadresse
  = label_tag do
    Lieferadresse wie Rechungsadresse
    = radio_button_tag 'cart_checkout_form[transport_address_id]', "0" , @cart_checkout_form.same_transport_address?

  %fieldset.inputs#address_select
    = render 'addresses/addresses', radio: true, controls: true, value: (@cart_checkout_form.same_transport_address? ? 0 :  @cart_checkout_form.transport_address.id)

  = link_to 'neue Adresse hinzuf√ºgen', new_user_address_path(current_user, radio: true), { class: 'colorbox' }

  = f.actions do
    = f.submit

